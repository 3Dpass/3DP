#![cfg_attr(not(feature = "std"), no_std)]

/// Edit this file to define custom logic or remove it if it is not needed.
/// Learn more about FRAME and the core library of Substrate FRAME pallets:
/// <https://docs.substrate.io/v3/runtime/frame>
pub use frame_system::pallet::*;
extern crate alloc;
use core::num::ParseIntError;
use alloc::vec::Vec;
// extern crate p3d;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

#[cfg(feature = "runtime-benchmarks")]
mod benchmarking;

fn decode_hex(buf: &[u8]) -> Result<Vec<u8>, ParseIntError> {
    let s = core::str::from_utf8(buf).unwrap();
    (0..s.len())
        .step_by(2)
        .map(|i| u8::from_str_radix(&s[i..i + 2], 16))
        .collect()
}

#[frame_support::pallet]
pub mod pallet {
	use frame_support::{dispatch::DispatchResultWithPostInfo, pallet_prelude::*};
	use frame_system::pallet_prelude::*;
    use alloc::vec::Vec;
    use frame_support::sp_runtime::print as prn;
    // use frame_support::sp_runtime::DispatchError;
    use frame_support::runtime_print;
    use super::decode_hex;

	/// Configure the pallet by specifying the parameters and types on which it depends.
	#[pallet::config]
	pub trait Config: frame_system::Config {
		/// Because this pallet emits events, it depends on the runtime's definition of an event.
		type Event: From<Event<Self>> + IsType<<Self as frame_system::Config>::Event>;
		/// For constraining the maximum bytes of a hash used for any proof
		type MaxBytesInHash: Get<u32>;
	}

	#[pallet::pallet]
	#[pallet::generate_store(pub(super) trait Store)]
	pub struct Pallet<T>(_);

	// #[pallet::storage]
	// #[pallet::getter(fn something)]
	// pub(super) type Proofs<T: Config> = StorageMap<_, Blake2_128Concat, Vec<u8>, (T::AccountId, T::BlockNumber), ValueQuery>;

	#[pallet::storage]
	/// Maps each proof to its owner and block number when the proof was made
	pub(super) type Proofs<T: Config> = StorageMap<
		_,
		Blake2_128Concat,
		Vec<u8>, // , T::MaxBytesInHash>,
		(T::AccountId, T::BlockNumber),
		OptionQuery,
	>;

	// The pallet's runtime storage items.
	// https://docs.substrate.io/v3/runtime/storage
	// #[pallet::storage]
	// #[pallet::getter(fn something)]
	// // Learn more about declaring storage items:
	// // https://docs.substrate.io/v3/runtime/storage#declaring-storage-items
	// pub type Something<T> = StorageValue<_, u32>;

	// Pallets use events to inform users when important changes are made.
	// https://docs.substrate.io/v3/runtime/events-and-errors
	#[pallet::event]
	#[pallet::generate_deposit(pub(super) fn deposit_event)]
	pub enum Event<T: Config> {
		/// Event documentation should end with an array that provides descriptive names for event
		/// parameters. [something, who]
		SomethingStored(u32, T::AccountId),
		/// Event emitted when a proof has been claimed. [who, claim]
		ClaimCreated(T::AccountId, Vec<u8>), // BoundedVec<u8, T::MaxBytesInHash>),
		/// Event emitted when a claim is revoked by the owner. [who, claim]
		ClaimRevoked(T::AccountId, Vec<u8>), // BoundedVec<u8, T::MaxBytesInHash>),
	}

	// Errors inform users that something went wrong.
	#[pallet::error]
	pub enum Error<T> {
		/// Error names should be descriptive.
		NoneValue,
		/// Errors should have helpful documentation associated with them.
		StorageOverflow,

		/// The proof has already been claimed.
		ProofAlreadyClaimed,
		/// The proof does not exist, so it cannot be revoked.
		NoSuchProof,
		/// The proof is claimed by another account, so caller can't revoke it.
		NotProofOwner,
	}

	#[pallet::hooks]
	impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> {}

	// Dispatchable functions allows users to interact with the pallet and invoke state changes.
	// These functions materialize as "extrinsics", which are often compared to transactions.
	// Dispatchable functions must be annotated with a weight and must return a DispatchResult.
	#[pallet::call]
	impl<T: Config> Pallet<T> {
		/// An example dispatchable that takes a singles value as a parameter, writes the value to
		/// storage and emits an event. This function must be dispatched by a signed extrinsic.
		// #[pallet::weight(10_000 + T::DbWeight::get().writes(1))]
		#[pallet::weight(10_000)]
		pub fn do_something(origin: OriginFor<T>, something: u32) -> DispatchResultWithPostInfo {
			// Check that the extrinsic was signed and get the signer.
			// This function will return an error if the extrinsic is not signed.
			// https://docs.substrate.io/v3/runtime/origins
			let who = ensure_signed(origin)?;

			// Update storage.
			// <Something<T>>::put(something);

			// Emit an event.
			Self::deposit_event(Event::SomethingStored(something, who));
			// Return a successful DispatchResultWithPostInfo
			// Ok(())
			Ok(().into())
		}

		// #[pallet::weight(1_000_000_000 + T::DbWeight::get().writes(1))]
		// pub fn create_claim(
		// 	origin: OriginFor<T>,
		// 	//proof: Vec<u8>,
		// 	proof: BoundedVec<u8, T::MaxBytesInHash>,
		// ) -> DispatchResult {
		// 	// Check that the extrinsic was signed and get the signer.
		// 	// This function will return an error if the extrinsic is not signed.
		// 	// https://docs.substrate.io/v3/runtime/origins
		// 	let sender = ensure_signe"std"d(origin)?;
		//
		// 	// Verify that the specified proof has not already been claimed.
		// 	// ensure!(!Proofs::<T>::contains_key(&proof), Error::<T>::ProofAlreadyClaimed);
		//
		// 	// Get the block number from the FRAME System pallet.
		// 	let current_block = <frame_system::Pallet<T>>::block_number();
		//
		// 	let content = decode_hex(&proof).unwrap();
		//
		// 	let mut buf: Vec<u8>;
		// 	let res = p3d::p3d_process(&content, p3d::AlgoType::Grid2d, 6i16, 2i16 );
		// 	match res {
		// 		Ok(v) => {
		// 			for i in 0..v.len()-1 {
		// 				prn(v[i].as_str());
		// 			}
		// 			buf = v.concat().as_bytes().to_vec();
		// 		},
		// 		Err(_) => {
		// 			runtime_print!(">>> Error");
		// 			return Err(DispatchError::Other(&"Error in p3d"));
		// 		},
		// 	}
		//
		// 	// buf.extend(&proof);
		// 	// Store the proof with the sender and block number.
		// 	// Proofs::<T>::insert(&buf, (&sender, current_block, ));
		// 	Proofs::<T>::insert(&proof, (&sender, current_block, ));
		//
		// 	// Emit an event that the claim was created.
		// 	Self::deposit_event(Event::ClaimCreated(sender, proof));
		//
		// 	Ok(())
		// }
		//
		// #[pallet::weight(10_000 + T::DbWeight::get().writes(1))]
		// pub fn revoke_claim(
		// 	origin: OriginFor<T>,
		// 	proof: Vec<u8>,
		// ) -> DispatchResult {
		// 	// Check that the extrinsic was signed and get the signer.
		// 	// This function will return an error if the extrinsic is not signed.
		// 	// https://docs.substrate.io/v3/runtime/origins
		// 	let sender = ensure_signed(origin)?;
		//
		// 	// Verify that the specified proof has been claimed.
		// 	ensure!(Proofs::<T>::contains_key(&proof), Error::<T>::NoSuchProof);
		//
		// 	// Get owner of the claim.
		// 	let (owner, _) = Proofs::<T>::get(&proof);
		//
		// 	// Verify that sender of the current call is the claim owner.
		// 	ensure!(sender == owner, Error::<T>::NotProofOwner);
		//
		// 	// Remove claim from storage.
		// 	Proofs::<T>::remove(&proof);
		//
		// 	// Emit an event that the claim was erased.
		// 	Self::deposit_event(Event::ClaimRevoked(sender, proof));
		// 	Ok(())
		// }

		// /// An example dispatchable that may throw a custom error.
		// #[pallet::weight(10_000 + T::DbWeight::get().reads_writes(1,1))]
		// pub fn cause_error(origin: OriginFor<T>) -> DispatchResult {
		// 	let _who = ensure_signed(origin)?;
		//
		// 	// Read a value from storage.
		// 	match <Something<T>>::get() {
		// 		// Return an error if the value has not been set.
		// 		None => Err(Error::<T>::NoneValue)?,
		// 		Some(old) => {
		// 			// Increment the value read from storage; will error in the event of overflow.
		// 			let new = old.checked_add(1).ok_or(Error::<T>::StorageOverflow)?;
		// 			// Update the value in storage with the incremented result.
		// 			<Something<T>>::put(new);
		// 			Ok(())
		// 		},
		// 	}
		// }
	}

	impl<T: Config> Pallet<T> {
		pub fn get_obj(idx: i32) -> i32 {
			idx + 1
		}
	}
}
